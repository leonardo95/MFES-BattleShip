class Board -- Represents the board's player
types
	public Cells = set of CellBoard; -- A board has a set of cells of type CellBoard
values
	public static BoardSize: int = 10;	-- Board's size
	public static rangeCells: set of int = {1, ..., BoardSize};	-- Range cells
	
	-- Shot types
	public static Shot_Miss: char = 'M';  -- Shot of type miss
	public static Shot_Strike: char = 'H';	 -- Shot of type hit 
	public static Shot_DestroyedShip: char = 'D';  -- Shot that destroyed the ship
	
	
instance variables
	-- Cell's Board
	public boardCells: Cells;	-- If battleShipBoard is 0, registers the shots of my enemy at my board (down board)
															-- If battleShipBoard is 1, registers my shots on the board of my enemy (top board)
	public battleShipBoard: int;
	
	inv card(boardCells) >= 1; -- Restricts the number boardCells
	
operations
-- Builds a Board depending on type (type is defined with battleShipBoard)
	public Board: int ==> Board
		Board(BoardType) ==
		(
			boardCells := {};
			battleShipBoard := BoardType;
			
			for all cells_x in set rangeCells do (
				for all cells_y in set rangeCells do (
					boardCells := boardCells union {new CellBoard(cells_x, cells_y)};
					)
				);
				
				for all boardcells in set boardCells do
					boardcells.setBoard(self);
		)
		post card(boardCells) = BoardSize * BoardSize;
		
-- Responsible for update ship strikes
	public strike: seq of int ==> char
		strike(coordinates) ==
		(
			let cell in set boardCells be st(cell.x_coord = coordinates(CellBoard`FIRST) and cell.y_coord = coordinates(CellBoard`SECOND)) in (
				
			if not cell.withShip or cell.striked then 
				return Shot_Miss;
				
			if cell.withShip and not cell.striked then (
				cell.setstrike();
				cell.ship.incStrikes();
				IO`println(cell.getShip().strikes);
			);
				
			if cell.ship.getShipStatus() then 
				return Shot_DestroyedShip;
					
			return Shot_Strike;
			);
		)
		pre CellBoard`verifyCoordinates(coordinates)
		post RESULT in set {Shot_Miss, Shot_Strike, Shot_DestroyedShip};
		
	public save: seq of int * char ==> ()
		save(move, strike) ==
		(
			let cell in set boardCells be st cell.x_coord = move(CellBoard`FIRST) and cell.y_coord = move(CellBoard`SECOND) in 
			(
				if strike = Shot_Strike or strike = Shot_DestroyedShip then
					cell.sethasShip();
			
				cell.setstrike();
			)
		)
		pre CellBoard`verifyCoordinates(move);
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board