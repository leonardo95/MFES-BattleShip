class CellBoard -- Represents the CellBoard class. 
types
	public coordinates = seq of int; -- Each cell has coordinates (x, y)
values
-- TODO Define values here
instance variables
	public x_coord: int;  -- CellBoard x coordinate
	public y_coord: int;  -- CellBoard y coordinate
	public striked: bool := false;  -- if striked or not
	public withShip: bool := false;  -- if with ship or not
	public myBoard: Board;  -- Board which the CellBoard belongs to
	public ship: Ship;  -- Ship which the CellBoard belongs to
	
	inv verifyCoordinates([x_coord] ^ [y_coord]); -- Restricts the range of te coordinates of a cell
	
operations
-- Builds a cell with a x and y
	public CellBoard: int * int ==> CellBoard	
		CellBoard(x, y) == 
		(
			x_coord := x;
			y_coord := y;
		)
	pre verifyCoordinates([x] ^ [y]);
	
-- Sets the board that the cell belongs
	public setBoard: Board ==> ()
		setBoard(board) ==
		(
			myBoard := board;
		)
	pre is_Board(board);
	
-- Sets the ship that the cell belongs
	public setShip : Ship ==> ()
		setShip(b) ==
		(
			ship := b;
		)
	pre is_Ship(b);
	
-- Sets the number of strikes		
	public setstrike: () ==> ()
		setstrike() == striked := true;

-- Sets the ship
	public sethasShip: () ==> ()
		sethasShip() == withShip := true;
		
-- Gets the ship
	public getShip: () ==> Ship
		getShip() == return ship;
functions
-- Checks (in)invalid coordinates 
	public verifyCoordinates: coordinates -> bool
		verifyCoordinates(coordinates) ==
			hd coordinates >= 1 and  hd coordinates <= Board`BoardSize
			and hd (tl coordinates) >= 1 and hd (tl coordinates) <= Board`BoardSize;
			
traces
-- TODO Define Combinatorial Test Traces here
end CellBoard