class Game -- Represents the Game class
types
-- TODO Define types here
values
	public static PlayerNum1: int = 2;
	public static PlayerNum2: int = 3;	
	public static playersSet: set of int = {PlayerNum1, PlayerNum2};  -- Set with available players
	
instance variables
	public player1: Player;
	public myBoard1: Board;  -- Player1's board of type 0
	public hisBoard1: Board;  -- Player1's board of type 1
	public player2: Player;
	public myBoard2: Board;  -- Player2's board of type 0
	public hisBoard2: Board;  -- Player2's board of type 1
	public endGame: bool := false;  -- if the game has ended or not
	public currPlayer: int; -- The player with the current play
	
	inv currPlayer in set playersSet;
	
operations
-- Class responsible for all the game logic
	public Game: seq of char * seq of char * int ==> Game
		Game(player1_name, player2_name, player_mode) ==
		(
			player1 := new Player(0, player1_name, player_mode);
			myBoard1 := player1.myBoard;
			hisBoard1 := player1.hisBoard;
			
			player2 := new Player(1, player2_name, player_mode);
			myBoard2 := player2.myBoard;
			hisBoard2 := player2.hisBoard;
			
			currPlayer := PlayerNum1;
			
			Interfaces`printGameInit();
		)
		post currPlayer in set playersSet;

-- Play the game by selecting the board spot's to attack. Also changes player and validates moves
	public play: () ==> int
		play() ==
		(
			if currPlayer = PlayerNum1 then 
			(
				if len player1.myMoves <> 0 then 
				(
					let move = player1.move() in
					(	
						IO`println("Player:" ^ player1.myName ^ " attacked Player: " ^ player2.myName);
						hisBoard1.save(move, myBoard2.strike(move));
						endGame := verifyEndGame(player2.myShips);
	
						if endGame then return currPlayer;
							changePlayer();
					)
				)
				else
				(
					IO`println("Player:" ^ player1.myName ^ " is out of moves!!");
					changePlayer();
				)
			)
			elseif currPlayer = PlayerNum2 then
			(
				if len player2.myMoves <> 0 then 
				(
					let move2 = player2.move() in 
					(
						IO`println("Player:" ^ player2.myName ^ " attacked Player: " ^ player1.myName);
						hisBoard2.save(move2, myBoard1.strike(move2));
						endGame := verifyEndGame(player1.myShips);
					
						if endGame then return currPlayer;
							changePlayer();
					)
				)
				else
				(
					IO`println("Player:" ^ player2.myName ^ " is out of moves!!");
					changePlayer();
				)
			);
			
			if len player1.myMoves = 0 and len player2.myMoves = 0 then
			(
				endGame := true;
				return 4;
			);
				
			return 1;
		);
		
-- Main class. Initiates the game, check for game over and show the winner and resuls
	public startGame: () ==> int
		startGame() == 
		(
		
			dcl winner: int := -1, loser: int  := 30;
				
			if len player1.myMoves > len player2.myMoves then
			(
				IO`println("Player " ^ player1.myName ^ " has more moves than player " ^ player2.myName);
				IO`println("Both players must have the same number of move");
				endGame := true;
				
			)
			elseif len player1.myMoves < len player2.myMoves then
			(
				IO`println("Player " ^ player2.myName ^ " has more moves than player " ^ player1.myName);
				IO`println("Both players must have the same number of move");
				endGame := true;
			)
			else 
			(
			
				while not endGame do
				(
					winner := play();
				);
				
				if winner = 2 then 
				(
					loser := 3;
				)
				elseif winner = 3 then
					loser:= 2;
				
				if winner = 4 then
					IO`println("No one won the game. Both players ran out of moves!")
				else
				(
					ShowBoards(winner, loser);
				)
			);
				return winner;			
		);
		
-- Get player		
	public getPlayer: int ==> Player
		getPlayer(player_num) ==
		(
			if player_num = 2 then
				return player1;
				
			return player2;
		);  

-- Changes player
	public changePlayer: () ==> ()
		changePlayer() == 
		(
			if currPlayer = PlayerNum1 then 
			(
				currPlayer := PlayerNum2;
			)
			elseif currPlayer = PlayerNum2 then
				currPlayer := PlayerNum1;
		);
		
-- Show the game results
	public ShowBoards: int * int ==> ()
		ShowBoards(winner, loser) ==
		(
						IO`print("The winner is: ");
						IO`println(getPlayer(winner).myName);
						IO`println("");
						IO`println("Player " ^ getPlayer(winner).myName ^ " Board:");
						Interfaces`printMyBoard(getPlayer(winner).myBoard, getPlayer(winner).myBoard.battleShipBoard);
						IO`println("");
						IO`println("Player " ^ getPlayer(winner).myName ^ " shot's on enemy's Board:");
						Interfaces`printMyBoard(getPlayer(winner).hisBoard, getPlayer(winner).hisBoard.battleShipBoard);
					
						IO`println("");
						IO`println("");
						IO`println("Player " ^ getPlayer(loser).myName ^ " Board:");
						Interfaces`printMyBoard(getPlayer(loser).myBoard, getPlayer(loser).myBoard.battleShipBoard);
						IO`println("");
						IO`println("Player " ^ getPlayer(loser).myName ^ " shot's on enemy's Board:");
						Interfaces`printMyBoard(getPlayer(loser).hisBoard, getPlayer(loser).hisBoard.battleShipBoard);
					
		);

-- Cheks for end game
	public verifyEndGame: seq of Ship ==> bool
		verifyEndGame(ships) ==
		(
			return forall ship in set elems ships & ship.getShipStatus();
		);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Game