class Player -- Represents the Player class
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	public myName : seq of char;  -- Player's name
	public myType: int;  -- Player's type
	public myBoard: Board;  -- Player's board with my ships
	public hisBoard: Board;  -- Enemy's board with attempted shots
	public myMoves: seq of CellBoard`coordinates;  -- Player's moves
	public myShips: seq of Ship;  -- Player's ships
	
	-- Each element represents the size of a ship.
	-- We are going to have 10 ships and we are following the standard rules in terms of size of each ship
	public static shipsSize : seq of int := [2,2,2,2,3,3,3,4,4,5];
	
	inv len shipsSize >= len myShips;
	
operations
-- Builds a ship according to his coordinates, direction, size and board
	public Player: int * seq of char ==> Player
		Player(type, name) == 
		(	
			dcl shipsInitpos: seq of CellBoard`coordinates, directions : seq of char;
			
			myName := name;
			myType := type;
			myBoard := new Board(0);
			hisBoard := new Board(1);
			
			shipsInitpos := getMyShipsPositions();
			myMoves := getMyMoves();
			initMyShips(shipsInitpos);		
		);
		
-- Choose position according to the coordinates given by the _moves file
	public move: () ==> CellBoard`coordinates
		move() ==
		(
			dcl mymove: CellBoard`coordinates;
			
			mymove := hd myMoves;
			myMoves := tl myMoves;
			
			return mymove;
		);
		
-- Initiates the ships with the positions given by _shipsInitPositions file
	public initMyShips: seq of CellBoard`coordinates  ==> ()
		initMyShips(shipsInitpos) ==
		(
			dcl shipTemp: Ship, sizes: seq of int, temp_pos : seq of CellBoard`coordinates, temp_shipsInitpos : seq of CellBoard`coordinates;
			sizes := shipsSize;
			myShips := [];
			temp_shipsInitpos := shipsInitpos;
	
			for i = 1 to len shipsSize do (
			temp_pos := [];
				for j = 1 to shipsSize(i) do (
					temp_pos := temp_pos ^ [(hd temp_shipsInitpos)];
					temp_shipsInitpos := tl temp_shipsInitpos;
				);
				shipTemp := new Ship(temp_pos, shipsSize(i), myBoard);
				myShips := myShips ^ [shipTemp];
			);
		);
	
-- Reads the initial position of the ships from file
	public getMyShipsPositions: () ==> seq of CellBoard`coordinates
		getMyShipsPositions() ==
		(
			if myType = 0 then
			( 
				return IO`freadval[seq of CellBoard`coordinates]("resources/player1_shipsPositions.txt").#2;
			)
			else
			( 
				return IO`freadval[seq of CellBoard`coordinates]("resources/player2_shipsPositions.txt").#2;
			)
		);

-- Reads the moves to be played from file
	public getMyMoves: () ==> seq of CellBoard`coordinates
		getMyMoves() ==
		(
			if myType = 0 then
			( 
				return IO`freadval[seq of CellBoard`coordinates]("resources/player1_moves.txt").#2;
			)
			else
			( 
				return IO`freadval[seq of CellBoard`coordinates]("resources/player2_moves.txt").#2;
			)
		);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Player