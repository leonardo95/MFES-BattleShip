class Ship -- Represents the Ship class
types
-- TODO Define types here

values
-- TODO Define values here

instance variables
	public static id: int := 0;  -- Ship id
	public tempId: int;  -- Ship temp id
	public sizeShip: int := 3;  -- Ship size
	public strikes: int := 0;  -- Ship strikes
	public positions: seq of CellBoard`coordinates := []; -- Ship positions
	public board: Board; -- Board which the ship belongs to
	
operations
-- Builds a ship according to his coordinates, direction, size and board
	public Ship: seq of CellBoard`coordinates * int * Board ==> Ship
	Ship(pos, size, bd) == 
	(
		tempId := id +1;
		id := tempId;
		sizeShip := size;
		positions := pos;
		board := bd;
		initShipCells();
	);
	
-- Update cells that have a ship on it
	public initShipCells: () ==> ()
		initShipCells() ==
		(
			for i = 1  to len positions do
			(
				let h in set board.boardCells be st h.x_coord = positions(i)(1) and 
												 h.y_coord = positions(i)(2)  in
				(
					h.sethasShip();
					h.setShip(self);
				
				)
			);
		);

-- Return ship status. If the number of strikes is equal to the size_ship then the ship e destroyed. Otherwise, return false
	public getShipStatus: () ==> bool
		getShipStatus() ==
		(
			--IO`println(strikes);
			if(strikes = sizeShip) then
			(
				return true;
			)
			else
			return false;
		);
-- Updates the ship strikes with an increase
	public incStrikes: () ==> ()
		incStrikes() == strikes := strikes + 1
		pre strikes < sizeShip
	post strikes <= sizeShip;
		
-- Updates the ship strikes with an decrease
	public decStrikes: () ==> ()
		decStrikes() == strikes := strikes - 1
		pre strikes < sizeShip
	post strikes <= sizeShip;
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Ship